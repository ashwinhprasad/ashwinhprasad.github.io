---
import { getCollection, type CollectionEntry, render } from "astro:content";
import BaseLayout from '../../layouts/BaseLayout.astro';
import TableOfContents from '../../components/TableOfContents.astro';

type Page = CollectionEntry<"pages">;
type Group = CollectionEntry<"groups">;

export async function getStaticPaths() {
  const pages = await getCollection("pages");
  return pages.map((page) => ({
    params: { slug: page.slug },
    props: { page },
  }));
}

const { page } = Astro.props as { page: Page };
const allGroups = await getCollection("groups");
const allPages = await getCollection("pages");

let groups: typeof allGroups = [];

if (page.data.belongsTo.type === "groups") {
  const belongsToGroups = page.data.belongsTo; // TS now knows this is the "groups" branch
  groups = allGroups.filter((g) =>
    belongsToGroups.groups.includes(g.slug)
  );
}
// const groups = allGroups.filter((g) => page.data.groups.includes(g.slug));
const references = [
  ...allGroups.filter((g) => page.data.references.includes(g.slug)),
  ...allPages.filter((p) => page.data.references.includes(p.slug)),
];

const { Content, headings } = await render(page);

// Generate a slug for each heading to use as an anchor id
function slugify(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');
}
---

<BaseLayout title={page.data.title} description={page.data.description}>
  <TableOfContents />
  <article class="page-container">
    <header class="page-header">
      <div class="page-meta">
        <time class="page-date">
          {page.data.created.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
        </time>
        {page.data.updated && (
          <span class="updated-indicator">
            Updated {page.data.updated.toLocaleDateString('en-US', { 
              year: 'numeric', 
              month: 'short', 
              day: 'numeric' 
            })}
          </span>
        )}
      </div>
      
      <h1 class="page-title">{page.data.title}</h1>
      
      {page.data.description && (
        <p class="page-description">{page.data.description}</p>
      )}

      {groups.length > 0 && (
        <div class="page-groups">
          {groups.map((group) => (
            <a href={`/groups/${group.slug}/`} class="group-tag" style={`--group-color: ${group.data.color || '#3b82f6'}`}>
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
              </svg>
              {group.data.title}
            </a>
          ))}
        </div>
      )}
    </header>

    <main class="page-content">
      {headings.length > 0 && (
        <aside class="table-of-contents">
          <div class="toc-header">
            <h2 class="toc-title">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M4 6h16M4 12h16M4 18h7" />
              </svg>
              Table of Contents
            </h2>
            <button 
              class="toc-toggle" 
              aria-expanded="true" 
              aria-label="Toggle table of contents"
            >
              <svg class="icon-expand" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="6 9 12 15 18 9"></polyline>
              </svg>
            </button>
          </div>
          <div class="toc-content">
            <nav class="toc-nav">
              {(() => {

                interface Heading {
                  depth: number;
                  text: string; // Adjust based on your heading structure
                  id?: string;   // Adjust based on your heading structure
                  // Add other properties as needed
                }

                interface Section {
                  heading: Heading;
                  subsections: Heading[];
                }

                // Build a hierarchical structure for the TOC
                const sections: Section[] = [];
                let currentSection: Section | null = null;
                let lastDepth = 0;
                
                headings.forEach((heading) => {
                  // Create a new section for h2 headings
                  if (heading.depth === 2) {
                    currentSection = {
                      heading,
                      subsections: []
                    };
                    sections.push(currentSection);
                  } 
                  // Add h3+ headings as subsections
                  else if (heading.depth > 2 && currentSection) {
                    currentSection.subsections.push(heading);
                  } 
                  // Handle h1 or headings with no parent section
                  else {
                    sections.push({ heading, subsections: [] });
                  }
                });
                
                return (
                  <ul class="toc-list">
                    {sections.map((section) => (
                      <li class={`toc-section ${section.heading.depth === 2 ? 'has-subsections' : ''}`}>
                        <div class="toc-section-header">
                          {section.subsections.length > 0 && (
                            <button class="toc-section-toggle" aria-expanded="true" aria-label="Toggle section">
                              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <polyline points="9 18 15 12 9 6"></polyline>
                              </svg>
                            </button>
                          )}
                          <a href={`#${slugify(section.heading.text)}`} class={`toc-link level-${section.heading.depth}`}>
                            {section.heading.depth === 1 && (
                              <span class="toc-marker h1-marker">●</span>
                            )}
                            {section.heading.depth === 2 && (
                              <span class="toc-marker h2-marker">○</span>
                            )}
                            {section.heading.text}
                          </a>
                        </div>
                        
                        {section.subsections.length > 0 && (
                          <ul class="toc-subsection-list">
                            {section.subsections.map((subsection) => (
                              <li class="toc-subsection">
                                <a href={`#${slugify(subsection.text)}`} class={`toc-link level-${subsection.depth}`}>
                                  {subsection.depth === 3 && (
                                    <span class="toc-marker h3-marker">■</span>
                                  )}
                                  {subsection.depth === 4 && (
                                    <span class="toc-marker h4-marker">□</span>
                                  )}
                                  {subsection.depth > 4 && (
                                    <span class="toc-marker h5-marker">▪</span>
                                  )}
                                  {subsection.text}
                                </a>
                              </li>
                            ))}
                          </ul>
                        )}
                      </li>
                    ))}
                  </ul>
                );
              })()}
            </nav>
          </div>
        </aside>
      )}
      <Content />
    </main>

    {references.length > 0 && (
      <aside class="references-section">
        <h2 class="references-title">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
            <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
          </svg>
          Connected Notes
        </h2>
        <div class="references-grid">
          {references.map((reference) => (
            <a 
              href={reference.collection === "groups" ? `/groups/${reference.slug}/` : `/pages/${reference.slug}/`}
              class="reference-link"
            >
              <div class="reference-icon">
                {reference.collection === "groups" ? (
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
                  </svg>
                ) : (
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
                    <polyline points="14,2 14,8 20,8"></polyline>
                  </svg>
                )}
              </div>
              <span class="reference-title">{reference.data.title}</span>
              <div class="reference-arrow">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M7 17l9.2-9.2M17 17V7H7"></path>
                </svg>
              </div>
            </a>
          ))}
        </div>
      </aside>
    )}
  </article>
</BaseLayout>

<style>
  .page-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 0;
  }

  /* Page Header */
  .page-header {
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid var(--border-primary);
  }

  .page-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .page-date {
    color: var(--text-muted);
  }

  .updated-indicator {
    color: var(--accent-secondary);
    font-weight: 500;
  }

  .page-title {
    font-size: clamp(2rem, 4vw, 2.5rem);
    font-weight: 700;
    margin: 0 0 1rem 0;
    color: var(--text-primary);
    line-height: 1.2;
  }

  .page-description {
    font-size: 1.2rem;
    color: var(--text-secondary);
    margin: 0 0 1.5rem 0;
    line-height: 1.6;
    font-style: italic;
  }

  .page-groups {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .group-tag {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--bg-secondary);
    border: 1px solid var(--border-primary);
    border-radius: 20px;
    text-decoration: none;
    color: var(--text-primary);
    font-size: 0.85rem;
    font-weight: 500;
    transition: all var(--transition-fast);
    position: relative;
    overflow: hidden;
  }

  .group-tag::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
    background: var(--group-color);
  }

  .group-tag:hover {
    background: var(--bg-tertiary);
    border-color: var(--border-secondary);
    transform: translateY(-1px);
  }

  .group-tag svg {
    color: var(--group-color);
  }

  /* Page Content */
  .page-content {
    margin-bottom: 3rem;
    line-height: 1.7;
    position: relative;
  }

  /* Table of Contents */
  .table-of-contents {
    background: var(--bg-secondary);
    border: 1px solid var(--border-primary);
    border-radius: 12px;
    margin-bottom: 2rem;
    position: relative;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .toc-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.25rem 1.5rem;
    border-bottom: 1px solid var(--border-primary);
    background: var(--bg-secondary);
    cursor: pointer;
  }

  .toc-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
  }

  .toc-title svg {
    color: var(--accent-primary);
  }

  .toc-toggle {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-fast);
    width: 28px;
    height: 28px;
    border-radius: 4px;
  }

  .toc-toggle:hover {
    color: var(--accent-primary);
    background: var(--bg-hover);
  }

  .toc-toggle.collapsed svg {
    transform: rotate(180deg);
  }

  .toc-content {
    padding: 1.25rem 1.5rem;
    max-height: 400px;
    overflow-y: auto;
    transition: all 0.3s ease;
  }

  .toc-content.collapsed {
    max-height: 0;
    padding: 0 1.5rem;
    overflow: hidden;
  }

  .toc-nav {
    position: relative;
  }

  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .toc-section {
    margin-bottom: 0.75rem;
    transition: all var(--transition-fast);
  }

  .toc-section.collapsed .toc-subsection-list {
    max-height: 0;
    overflow: hidden;
    opacity: 0;
  }

  .toc-section.collapsed .toc-section-toggle svg {
    transform: rotate(0deg);
  }

  .toc-section-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .toc-section-toggle {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    color: var(--text-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    width: 20px;
    height: 20px;
  }

  .toc-section-toggle svg {
    transform: rotate(90deg);
    transition: all 0.2s ease;
  }

  .toc-section-toggle:hover {
    color: var(--accent-primary);
  }

  .toc-subsection-list {
    list-style: none;
    padding-left: 1.75rem;
    margin: 0.5rem 0 0;
    max-height: 500px;
    opacity: 1;
    transition: all 0.3s ease;
  }

  .toc-subsection {
    margin-bottom: 0.5rem;
  }

  .toc-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-primary);
    text-decoration: none;
    transition: all var(--transition-fast);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.95rem;
    line-height: 1.5;
  }

  .toc-link:hover {
    color: var(--accent-primary);
    background: var(--bg-hover);
    transform: translateX(2px);
  }

  .toc-link.active {
    color: var(--accent-primary);
    background: var(--bg-hover);
    font-weight: 600;
  }

  .toc-link.level-1 {
    font-weight: 600;
    font-size: 1rem;
  }

  .toc-link.level-2 {
    font-weight: 500;
  }

  .toc-link.level-3 {
    font-size: 0.9rem;
  }

  .toc-link.level-4, .toc-link.level-5, .toc-link.level-6 {
    font-size: 0.85rem;
    color: var(--text-secondary);
  }

  .toc-marker {
    display: inline-block;
    flex-shrink: 0;
  }

  .h1-marker {
    color: var(--accent-primary);
    font-size: 0.8rem;
  }

  .h2-marker {
    color: var(--accent-secondary);
    font-size: 0.8rem;
  }

  .h3-marker {
    color: var(--accent-tertiary, #10b981);
    font-size: 0.65rem;
  }

  .h4-marker {
    color: var(--text-muted);
    font-size: 0.65rem;
  }

  .h5-marker {
    color: var(--text-muted);
    font-size: 0.5rem;
  }

  /* Global content styles are handled in Layout.astro */
  .page-content :global(h1),
  .page-content :global(h2),
  .page-content :global(h3),
  .page-content :global(h4),
  .page-content :global(h5),
  .page-content :global(h6) {
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .page-content :global(h1) {
    font-size: 1.8rem;
  }

  .page-content :global(h2) {
    font-size: 1.5rem;
  }

  .page-content :global(h3) {
    font-size: 1.3rem;
  }

  .page-content :global(p) {
    margin-bottom: 1.5rem;
  }

  .page-content :global(ul),
  .page-content :global(ol) {
    margin-bottom: 1.5rem;
  }

  .page-content :global(li) {
    margin-bottom: 0.5rem;
  }

  /* References Section */
  .references-section {
    background: var(--bg-secondary);
    border: 1px solid var(--border-primary);
    border-radius: 12px;
    padding: 1.5rem;
    margin-top: 3rem;
  }

  .references-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0 0 1.5rem 0;
    color: var(--text-primary);
  }

  .references-title svg {
    color: var(--accent-primary);
  }

  .references-grid {
    display: grid;
    gap: 0.75rem;
  }

  .reference-link {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    background: var(--bg-tertiary);
    border: 1px solid var(--border-primary);
    border-radius: 8px;
    text-decoration: none;
    color: var(--text-primary);
    transition: all var(--transition-fast);
    position: relative;
  }

  .reference-link:hover {
    background: var(--bg-hover);
    border-color: var(--border-secondary);
    transform: translateX(4px);
  }

  .reference-icon {
    color: var(--text-muted);
    flex-shrink: 0;
  }

  .reference-title {
    flex: 1;
    font-weight: 500;
  }

  .reference-arrow {
    color: var(--text-muted);
    opacity: 0;
    transition: all var(--transition-fast);
  }

  .reference-link:hover .reference-arrow {
    opacity: 1;
    transform: translate(2px, -2px);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .page-container {
      padding: 1rem 0;
    }

    .page-header {
      margin-bottom: 2rem;
      padding-bottom: 1.5rem;
    }

    .page-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .page-groups {
      gap: 0.5rem;
    }

    .group-tag {
      font-size: 0.8rem;
      padding: 0.4rem 0.8rem;
    }

    .table-of-contents {
      margin-bottom: 1.5rem;
    }

    .toc-header {
      padding: 1rem 1.25rem;
    }
    
    .toc-content {
      padding: 1rem 1.25rem;
      max-height: 300px;
    }
    
    .toc-title {
      font-size: 1.1rem;
    }
    
    .toc-subsection-list {
      padding-left: 1.25rem;
    }
    
    .toc-link {
      padding: 0.2rem 0.4rem;
    }
    
    .toc-link.level-1 {
      font-size: 0.95rem;
    }
    
    .toc-link.level-2 {
      font-size: 0.9rem;
    }
    
    .toc-link.level-3 {
      font-size: 0.85rem;
    }
    
    .toc-link.level-4, .toc-link.level-5, .toc-link.level-6 {
      font-size: 0.8rem;
    }

    .references-section {
      padding: 1rem;
      margin-top: 2rem;
    }

    .references-title {
      font-size: 1.1rem;
    }

    .reference-link {
      padding: 0.6rem 0.8rem;
    }
  }
</style>
