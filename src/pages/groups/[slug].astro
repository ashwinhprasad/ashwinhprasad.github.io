---
import { getCollection, type CollectionEntry, render } from "astro:content";

type Group = CollectionEntry<"groups">;
type Page = CollectionEntry<"pages">;

export async function getStaticPaths() {
  const groups = await getCollection("groups");
  return groups.map((group) => ({
    params: { slug: group.slug },
    props: { group },
  }));
}

const { group } = Astro.props as { group: Group };

const allGroups = await getCollection("groups");
const allPages = await getCollection("pages");
const allSeries = await getCollection("series");

const parentGroups = allGroups.filter((g) => group.data.parents.includes(g.slug));
const subgroups = allGroups.filter((g) => group.data.subgroups.includes(g.slug));
const pages = allPages.filter((p) => group.data.pages.includes(p.slug));
const series = allSeries.filter((s) => group.data.series.includes(s.slug));

const { Content } = await render(group);

import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title={group.data.title} description={group.data.description}>
  <article class="group-container">
    <header class="group-header">
      <div class="group-color-bar" style={`background: linear-gradient(135deg, ${group.data.color || '#3b82f6'}, ${group.data.color || '#3b82f6'}80)`}></div>
      
      <div class="group-meta">
        <div class="group-icon" style={`color: ${group.data.color || '#3b82f6'}`}>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
          </svg>
        </div>
        <div class="group-stats">
          <span class="stat-item">
            <span class="stat-number">{pages.length}</span>
            <span class="stat-label">pages</span>
          </span>
          {series.length > 0 && (
            <>
              <span class="stat-divider">•</span>
              <span class="stat-item">
                <span class="stat-number">{series.length}</span>
                <span class="stat-label">series</span>
              </span>
            </>
          )}
          {subgroups.length > 0 && (
            <>
              <span class="stat-divider">•</span>
              <span class="stat-item">
                <span class="stat-number">{subgroups.length}</span>
                <span class="stat-label">subgroups</span>
              </span>
            </>
          )}
        </div>
      </div>

      <h1 class="group-title">{group.data.title}</h1>
      <p class="group-description">{group.data.description}</p>
    </header>

    <main class="group-content">
      <Content />
    </main>

    <div class="group-sections">
      {parentGroups.length > 0 && (
        <section class="parents-section">
          <h2 class="section-title">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
              <polyline points="9 22 9 12 15 12 15 22"></polyline>
            </svg>
            Parent Groups
          </h2>
          <div class="items-grid">
            {parentGroups.map((parentGroup) => (
              <a href={`/groups/${parentGroup.slug}/`} class="item-card parent-card">
                <div class="item-color" style={`background: linear-gradient(135deg, ${parentGroup.data.color || '#3b82f6'}, ${parentGroup.data.color || '#3b82f6'}80)`}></div>
                <div class="item-content">
                  <h3 class="item-title">{parentGroup.data.title}</h3>
                  <p class="item-description">{parentGroup.data.description}</p>
                </div>
                <div class="item-arrow">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M7 17l9.2-9.2M17 17V7H7"></path>
                  </svg>
                </div>
              </a>
            ))}
          </div>
        </section>
      )}

      {subgroups.length > 0 && (
        <section class="subgroups-section">
          <h2 class="section-title">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
            </svg>
            Subgroups
          </h2>
          <div class="items-grid">
            {subgroups.map((subgroup) => (
              <a href={`/groups/${subgroup.slug}/`} class="item-card subgroup-card">
                <div class="item-color" style={`background: linear-gradient(135deg, ${subgroup.data.color || '#3b82f6'}, ${subgroup.data.color || '#3b82f6'}80)`}></div>
                <div class="item-content">
                  <h3 class="item-title">{subgroup.data.title}</h3>
                  <p class="item-description">{subgroup.data.description}</p>
                </div>
                <div class="item-arrow">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M7 17l9.2-9.2M17 17V7H7"></path>
                  </svg>
                </div>
              </a>
            ))}
          </div>
        </section>
      )}

      {series.length > 0 && (
        <section class="series-section">
          <h2 class="section-title">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
              <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
            </svg>
            Series
          </h2>
          <div class="items-grid">
            {series.map((seriesItem) => (
              <a href={`/series/${seriesItem.slug}/`} class="item-card series-card">
                <div class="item-content">
                  <h3 class="item-title">{seriesItem.data.title}</h3>
                  {seriesItem.data.description && (
                    <p class="item-description">{seriesItem.data.description}</p>
                  )}
                  <div class="item-meta">
                    <span class="series-pages-count">
                      {seriesItem.data.pages.length} {seriesItem.data.pages.length === 1 ? 'page' : 'pages'}
                    </span>
                    <time class="item-date">
                      {seriesItem.data.created.toLocaleDateString('en-US', { 
                        month: 'short', 
                        day: 'numeric',
                        year: 'numeric'
                      })}
                    </time>
                  </div>
                </div>
                <div class="item-arrow">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M7 17l9.2-9.2M17 17V7H7"></path>
                  </svg>
                </div>
              </a>
            ))}
          </div>
        </section>
      )}

      {pages.length > 0 && (
        <section class="pages-section">
          <h2 class="section-title">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
              <polyline points="14,2 14,8 20,8"></polyline>
            </svg>
            Pages
          </h2>
          <div class="items-grid">
            {pages.map((page) => (
              <a href={`/pages/${page.slug}/`} class="item-card page-card">
                <div class="item-content">
                  <h3 class="item-title">{page.data.title}</h3>
                  {page.data.description && (
                    <p class="item-description">{page.data.description}</p>
                  )}
                  <div class="item-meta">
                    <time class="item-date">
                      {page.data.created.toLocaleDateString('en-US', { 
                        month: 'short', 
                        day: 'numeric',
                        year: 'numeric'
                      })}
                    </time>
                  </div>
                </div>
                <div class="item-arrow">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M7 17l9.2-9.2M17 17V7H7"></path>
                  </svg>
                </div>
              </a>
            ))}
          </div>
        </section>
      )}
    </div>
  </article>
</BaseLayout>

<style>
  .group-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 0;
  }

  /* Group Header */
  .group-header {
    margin-bottom: 3rem;
    position: relative;
  }

  .group-color-bar {
    height: 4px;
    width: 100%;
    border-radius: 2px;
    margin-bottom: 2rem;
  }

  .group-meta {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1.5rem;
  }

  .group-icon {
    flex-shrink: 0;
  }

  .group-stats {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .stat-item {
    display: flex;
    align-items: baseline;
    gap: 0.25rem;
  }

  .stat-number {
    color: var(--accent-primary);
    font-weight: 600;
  }

  .stat-label {
    color: var(--text-muted);
  }

  .stat-divider {
    color: var(--border-secondary);
  }

  .group-title {
    font-size: clamp(2rem, 4vw, 2.5rem);
    font-weight: 700;
    margin: 0 0 1rem 0;
    color: var(--text-primary);
    line-height: 1.2;
  }

  .group-description {
    font-size: 1.2rem;
    color: var(--text-secondary);
    margin: 0 0 2rem 0;
    line-height: 1.6;
  }

  /* Group Content */
  .group-content {
    margin-bottom: 3rem;
    line-height: 1.7;
  }

  .group-content :global(h1),
  .group-content :global(h2),
  .group-content :global(h3),
  .group-content :global(h4),
  .group-content :global(h5),
  .group-content :global(h6) {
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .group-content :global(p) {
    margin-bottom: 1.5rem;
  }

  /* Group Sections */
  .group-sections {
    display: flex;
    flex-direction: column;
    gap: 3rem;
  }

  .section-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.4rem;
    font-weight: 600;
    margin: 0 0 1.5rem 0;
    color: var(--text-primary);
  }

  .section-title svg {
    color: var(--accent-primary);
  }

  .items-grid {
    display: grid;
    gap: 1rem;
  }

  .item-card {
    display: block;
    background: var(--bg-secondary);
    border: 1px solid var(--border-primary);
    border-radius: 12px;
    padding: 1.25rem;
    text-decoration: none;
    color: inherit;
    transition: all var(--transition-medium);
    position: relative;
    overflow: hidden;
  }

  .item-card:hover {
    border-color: var(--border-secondary);
    background: var(--bg-tertiary);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }

  .subgroup-card {
    border-left: 3px solid transparent;
  }

  .subgroup-card .item-color {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
  }

  .parent-card {
    border-left: 3px solid transparent;
  }

  .parent-card .item-color {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
  }
  
  .series-card {
    border-left: 3px solid var(--accent-secondary, #4f46e5);
  }

  .series-pages-count {
    font-size: 0.8rem;
    color: var(--text-secondary);
    font-family: var(--font-mono);
  }

  .item-content {
    position: relative;
    z-index: 1;
  }

  .item-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    color: var(--text-primary);
    line-height: 1.3;
  }

  .item-description {
    font-size: 0.9rem;
    color: var(--text-secondary);
    margin: 0 0 0.75rem 0;
    line-height: 1.5;
  }

  .item-meta {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .item-date {
    font-size: 0.8rem;
    color: var(--text-muted);
    font-family: var(--font-mono);
  }

  .item-arrow {
    position: absolute;
    top: 1.25rem;
    right: 1.25rem;
    color: var(--text-muted);
    transition: all var(--transition-fast);
    opacity: 0;
  }

  .item-card:hover .item-arrow {
    opacity: 1;
    transform: translate(2px, -2px);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .group-container {
      padding: 1rem 0;
    }

    .group-header {
      margin-bottom: 2rem;
    }

    .group-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .group-stats {
      font-size: 0.8rem;
    }

    .group-sections {
      gap: 2rem;
    }

    .section-title {
      font-size: 1.2rem;
    }

    .item-card {
      padding: 1rem;
    }
  }

    /* text-decoration: none;
    transition: color 0.2s;
  } */

  a:hover {
    color: #4f46e5;
    text-decoration: underline;
  }
</style>
